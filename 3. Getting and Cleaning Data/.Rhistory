install.packages("RTextTools")
install.packages("swirl")
install.packages('xlsx')
install.packages('xlsx')
install.packages('XML')
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
filename <- 'housing_micro_survey_data_2006.csv'
download.file(url, destfile=filename)
DT <- fread(filename)
install.packages('RMySQL')
install.packages('tm')
library(tm)
update.packages(checkBuilt=TRUE, ask=FALSE)
R.version
install.packages('dplyr')
install.packages('tidyr')
setwd('C:/Users/bastanib/Desktop/')
library(xlsx)
library(dplyr)
df <- read.xlsx('Amazon forward citations - 20160126.xlsx', sheetIndex = 1, colClasses = 'character', stringsAsFactors = FALSE)
df_str <- df %>% mutate(str = strsplit(Identifier, split=' | ', fixed=TRUE))
View(df_str)
str(df_str)
v1 <- C('hello', 'how', 'are')
v1 <- c('hello', 'how', 'are')
v1
v2 <- c('you', 'my', 'friend')
c(v1, v2)
v <- c(df_str$str)
str(v)
v1
v2
list(v1, v2)
unlist(list(v1, v2))
v <- unlist(df_list$str)
v <- unlist(df_str$str)
v
length(v)
v_unique <- unique(v)
length(v_unique)
write.xlsx(v_unique, 'Amazon-forward_list')
write.xlsx(v_unique, file = 'Amazon.xlsx')
length(v_unique)
date()
Sys.DatSys.chmod()
Sys.Date()
format(Sys.Date(), "%A %B %Y")
format(Sys.Date(), "%A %B %d, %Y")
Sys.timezone()
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package = lubridate)
this_day <- today()
print(this_day)
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 May 17')
mdy('March 12, 1975')
dmy(25081985)
ymd('192012')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms('03:22:14')
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 12, minutes = 48)
this_moment
nyc <- now(tzone = 'America/New_Yord')
nyc <- now(tzone = 'America/New_York')
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = 'Asia/Hong_Kong')
arrive
last_time <- mdy('June 17, 2008', tz='Singapore')
last_time
?new_interval
how_long <- new_interval(now(), last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
setwd('GitHub/datasciencecoursera/3. Getting and Cleaning Data/')
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
filename <- 'community_survey_2006.csv'
# use method='curl' if on a Mac, skip it if on Windows
if (.Platform$OS.type == "windows") {
download.file(url, destfile=filename)
} else {
download.file(url, destfile=filename, method='curl')
}
df <- read.csv(filename)
str(df)
?strsplit
temp <- strsplit(names(df), split='wgtp')
temp
names(df)
strsplit(names(df), split='wgtp')
strsplit(names(df), split='wgtp')[123]
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
filename <- 'GDP.csv'
# use method='curl' if on a Mac, skip it if on Windows
if (.Platform$OS.type == "windows") {
download.file(url, destfile=filename)
} else {
download.file(url, destfile=filename, method='curl')
}
df <- read.csv(filename)
str(df)
df$Gross.domestic.product.2012
head(df$Gross.domestic.product.2012)
str(df)
View(df)
df$X.3
sub(',' , '', df$X.3)
?sub
gsub(',' , '', df$X.3)
as.Integer(gsub(',' , '', df$X.3))
as.integer(gsub(',' , '', df$X.3))
?mean
mean(as.integer(gsub(',' , '', df$X.3), na.rm=TRUE)
)
mean(as.integer(gsub(',' , '', df$X.3)), na.rm=TRUE)
mean(as.double(gsub(',' , '', df$X.3)), na.rm=TRUE)
as.double(gsub(',' , '', df$X.3))
mean(c(1,2))
as.integer(gsub(',' , '', df$X.3))
temp <- as.integer(gsub(',' , '', df$X.3))
temp
temp <- temp[!is.na[temp]]
temp <- temp[!is.na(temp)]
temp
mean(temp)
mean(temp[1-10])
mean(temp[1-2])
?mean
as.double(mean(temp[1-2]))
mean(c(1,3))
mean(c(1,4))
mean(c(16244600, 8227103))
mean(temp[1-2])
str(temp)
fixed(mean(temp[1-2]), digits=1)
df$n <- gsub(',', '', df$X.3)
df$n <- as.integer(gsub(',', '', df$X.3))
mean(df$n, na.rm = TRUE)
temp <- df$n[df$n >= 1000000]
temp
mean(temp, na.rm = TRUE)
df$X.3
str(df)
mean(as.integer(gsub(',' , '', df$X.3)), na.rm=TRUE) # <- returns 1453710
mean(as.numeric(gsub(',' , '', df$X.3)), na.rm=TRUE) # <- returns 1453710
mean(as.numeric(as.character(gsub(',' , '', df$X.3))), na.rm=TRUE) # <- returns 1453710
as.numeric(df$X.3)
?"as.numeric"
df$X.3[1-10]
df$X.3[1:10]
as.numeric(df$X.3[1:10])
as.character(df$X.3[1:10])
as.numeric(as.character(df$X.3[1:10]))
df <- read.csv(filename, stringsAsFactors = False)
df <- read.csv(filename, stringsAsFactors = FALSE)
as.numeric(as.character(df$X.3[1:10]))
as.numeric(df$X.3[1:10])
df$X.3[1:10]
as.numeric('1,345')
as.numeric(gsub(',', '', df$X.3[1:10]))
mean(as.numeric(gsub(',' , '', df$X.3)), na.rm=TRUE) # <- returns 1453710
as.numeric(gsub(',' , '', df$X.3))
View(df)
df$Gross.domestic.product.2012[!is.na(df$Gross.domestic.product.2012)]
c(1,3,4)[1:2]
df$X.3[4:194]
df$Gross.domestic.product.2012[!is.na(df$Gross.domestic.product.2012)]
df$X.3[5:194]
as.numeric(df$X.3[5:194])
as.numeric(gsub(',', '', df$X.3[5:194]))
mean(as.numeric(gsub(',', '', df$X.3[5:194])))
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
filename <- 'GDP.csv'
# use method='curl' if on a Mac, skip it if on Windows
if (.Platform$OS.type == "windows") {
download.file(url, destfile=filename)
} else {
download.file(url, destfile=filename, method='curl')
}
df <- read.csv(filename)
str(df)
View(df)
head(df$X)
rm(list = ls())
gdp_url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
gdp_filename <- 'GDP.csv'
edu_url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
edu_filename <- 'EDU.csv'
# use method='curl' if on a Mac, skip it if on Windows
if (.Platform$OS.type == "windows") {
download.file(gdp_url, destfile=gdp_filename)
download.file(edu_url, destfile=edu_filename)
} else {
download.file(gdp_url, destfile=gdp_filename, method='curl')
download.file(edu_url, destfile=edu_filename, method='curl')
}
gdp_df <- read.csv(gdp_filename)
edu_df <- read.csv(edu_filename)
View(gdp_df)
View(edu_df)
grep('Fiscal year end', edu_df$Special.Notes)
any(as.numeric(gdp_df$Gross.domestic.product.2012))
as.numeric(gdp_df$Gross.domestic.product.2012)
gdp_df$Gross.domestic.product.2012
gdp_url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
gdp_filename <- 'GDP.csv'
edu_url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
edu_filename <- 'EDU.csv'
# use method='curl' if on a Mac, skip it if on Windows
if (.Platform$OS.type == "windows") {
download.file(gdp_url, destfile=gdp_filename)
download.file(edu_url, destfile=edu_filename)
} else {
download.file(gdp_url, destfile=gdp_filename, method='curl')
download.file(edu_url, destfile=edu_filename, method='curl')
}
gdp_df <- read.csv(gdp_filename, stringsAsFactors = FALSE)
edu_df <- read.csv(edu_filename, stringsAsFactors = FALSE)
gdp_df$Gross.domestic.product.2012
as.numeric(gdp_df$Gross.domestic.product.2012)
!is.na(as.numeric(gdp_df$Gross.domestic.product.2012))
na.omit(as.numeric(gdp_df$Gross.domestic.product.2012))
?na.omit
x <- c(NA, 1, NA, 2)
y <- na.omit(x)
y
y <- na.omit(x)[1]
y
y <- na.omit(x)
y[1]
y[2]
y[3]
gdp_df_ranked <- na.omit(as.numeric(gdp_df$Gross.domestic.product.2012))
gdp_df_ranked
gdp_df_ranked <- as.numeric(gdp_df$Gross.domestic.product.2012)
gdp_df_ranked <- gdp_df_ranked[!is.na(gdp_df_ranked)]
gdp_df_ranked
gdp_df_ranked <- gdp_df[!is.na(as.numeric(gdp_df$Gross.domestic.product.2012))]
gdp_df_ranked <- gdp_df[!is.na(as.numeric(gdp_df$Gross.domestic.product.2012)),]
gdp_df_ranked
ranked_gdp_df <- gdp_df[!is.na(as.numeric(gdp_df$Gross.domestic.product.2012)), ]
# first merge the two dfs by country ID
merged_df <- merge(ranked_gdp_df, edu_df, by.x='X', by.y='CountryCode')
ranked_gdp_df
nrows(ranked_gdp_df)
nrow(ranked_gdp_df)
nrow(merged_df)
which(c(TRUE, FALSE, TRUE))
?grep
grep("^Fiscal year end: June", merged_df$Special.Notes)
length(grep("^Fiscal year end: June", merged_df$Special.Notes)))
length(grep("^Fiscal year end: June", merged_df$Special.Notes))
